@using AzureBlazorCosmosWasm.Data
@using Syncfusion.Blazor;
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.DropDowns;
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Inputs;
@using SuperCodeData;
@using Microsoft.Extensions.Logging;

@inject ILogger<User> Logger;
@inject SuperCodeClient Client;
 
@{
  if(ErrorMessage != null)
  {
    <p>@ErrorMessage</p>
  }
}

<h1>Users</h1>
<SfGrid @ref="Grid"
        TValue="User"
        AllowSorting="true"
        AllowPaging="true"
        AllowFiltering="true"
        ShowColumnChooser="true"
        Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Cancel", "Update", "Search", "ColumnChooser"})"
>
  <SfDataManager Adaptor="Adaptors.CustomAdaptor">
    <UserDataAdaptor ErrorMessage="@ErrorMessage" />
  </SfDataManager>
  <GridPageSettings PageSize="20"/>
  <GridEvents OnActionBegin="OnActionBegin" TValue="User" />
  <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="EditMode.Dialog">
    <Template>
      @{
        var User = (context as User);
        <div>
          <div class="form-row">
            <div class="form-group col-md-6">
              <label>First Name</label>
              <SfTextBox ID="FirstName" @bind-Value="@(User.FirstName)" />
            </div>
            <div class="form-group col-md-6">
              <label>Last Name</label>
              <SfTextBox ID="LastName" @bind-Value="@(User.LastName)" />
            </div>
          </div>
          <div class="form-row">
            <div class="form-group col-md-6">
              <label>Email</label>
              <SfTextBox ID="EMail" @bind-Value="@(User.Email)" />
            </div>
            <div class="form-group col-md-6">
              <SfDropDownList @ref="DropDownList"
                              ID="UserType"
                              Placeholder="Type"
                              FloatLabelType="Syncfusion.Blazor.Inputs.FloatLabelType.Always"
                              DataSource="@UserTypesDropDownData"
                              Value="@((context as User).Type.ToString())"
                              TValue="string"
                              TItem="string"
                />
            </div>
          </div>
          <div class="form-row">
            <div class="form-group col-md-6">
              <SfDatePicker ID="BirthDate"
                            Placeholder="Birth Date"
                            FloatLabelType="Syncfusion.Blazor.Inputs.FloatLabelType.Always"
                            @bind-Value="@(User.BirthDate)"
              />
            </div>
            <div class="form-group col-md-6">
              <label>Location Id</label>
              <SfTextBox ID="LocationId" @bind-Value="@(User.LocationId)" />
            </div>
          </div>
        </div>    
      }
    </Template>
  </GridEditSettings>
  <GridColumns>
    <GridColumn Field="@nameof(User.Id)" IsPrimaryKey="true" IsIdentity="true" Width="0" />
    <GridColumn Field="@nameof(User.Type)">
      <FilterTemplate>
        <SfDropDownList 
          ID="UserTypeFilter"
          Placeholder="Type"
          DataSource="@UserTypesFilterDropDownData"
          Value="@((string)(context as PredicateModel).Value)"
          TValue="string"
          TItem="string"
        >
          <DropDownListEvents ValueChange="@Change" TValue="string"></DropDownListEvents>
          <DropDownListFieldSettings Value="Type" Text="Type"></DropDownListFieldSettings>
        </SfDropDownList>
      </FilterTemplate>
    </GridColumn>
    <GridColumn Field="@nameof(User.FirstName)"/>
    <GridColumn Field="@nameof(User.LastName)"/>
    <GridColumn Field="@nameof(User.Email)"/>
    <GridColumn Field="@nameof(User.BirthDate)" HeaderText="Birth Date" EditType="EditType.DatePickerEdit" Format="d" TextAlign="TextAlign.Right" Type="ColumnType.Date" />
    <GridColumn Field="@nameof(User.LocationId)"/>
    
  </GridColumns>
</SfGrid>

@code {
  SfGrid<User> Grid;
  SfDropDownList<string, string> DropDownList;

  public static List<string> UserTypesDropDownData = new List<string>();
  public static List<string> UserTypesFilterDropDownData = new List<string>();

  public string ErrorMessage;
  
  protected override void OnInitialized()
  {
    UserTypesFilterDropDownData.Add("All");
    foreach (string item in Enum.GetNames(typeof(UserType)))
    {
      UserTypesFilterDropDownData.Add(item);
      UserTypesDropDownData.Add(item);
    }
  }

  public void OnActionBegin(Syncfusion.Blazor.Grids.ActionEventArgs<User> Args)
  {
    Logger.LogWarning("Action Begin");
      if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
      {
        Args.Data.Type = (UserType)Enum.Parse(typeof(UserType), DropDownList.Value);
      }
  }

  public void Change(@Syncfusion.Blazor.DropDowns.ChangeEventArgs<string> args)
  {
    Logger.LogWarning("Change");
    if (args?.Value == "All")
    {
      Logger.LogWarning("If");
      Grid.ClearFiltering();
    }
    else
    {
      Logger.LogWarning("Else");
      Grid.FilterByColumn("Type", "contains", args?.Value);
    }
  }
}